version: '3.8'

services:
  eureka-server:
    build:
      context: ./services/service-discovery-server/service-discovery-server
      dockerfile: Dockerfile
    restart: always
    environment:
      - spring.application.name=service-discovery-server
      - server.port=8761
      - eureka.client.register-with-eureka=false
      - eureka.client.fetch-registry=false
    ports:
      - "8761:8761"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"] 
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  config-server:
    depends_on:
      eureka-server:
        condition: service_healthy
    build:
      context: ./services/config-server/config-server
      dockerfile: Dockerfile
    restart: always
    environment:
      - spring.application.name=config-server
      - server.port=8888
      - spring.cloud.config.server.git.uri=https://github.com/caoh29/OMS-config.git
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    ports:
      - "8888:8888"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  auth-server-keycloak:
    depends_on:
      eureka-server:
        condition: service_healthy
      auth-db-pg:
        condition: service_started
    image: quay.io/keycloak/keycloak:26.3.2
    restart: always
    command: start-dev --hostname=http://auth-server-keycloak:8443 --http-enabled=true --http-port=8443
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      # - KC_DB=dev-mem
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://auth-db-pg:5432/oms_db
      - KC_DB_USERNAME=camilo
      - KC_DB_PASSWORD=camilo123
    ports:
      # - "8080:8080"
      - "8443:8443"
      - "9000:9000"
    networks:
      - backend
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:9000/health/ready"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s

  auth-db-pg:
    image: postgres:15
    restart: always
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=camilo
      - POSTGRES_PASSWORD=camilo123
      - POSTGRES_DB=oms_db
    ports:
      - "5432:5432"
    networks:
      - backend

  api-gateway:
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      auth-server-keycloak:
        condition: service_started
    build:
      context: ./services/api-gateway/api-gateway
      dockerfile: Dockerfile
    restart: always
    environment:
      - spring.application.name=api-gateway
      # - server.port=8080 # This is not needed
      - spring.config.import=configserver:http://config-server:8888
    ports:
      - "8080:8080"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  order-service:
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      auth-server-keycloak:
        condition: service_started
      api-gateway:
        condition: service_healthy
      product-catalog-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
    build:
      context: ./services/order-service/order-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - spring.application.name=order-service
      # - server.port=3000 # This is not needed
      - spring.config.import=configserver:http://config-server:8888
    ports:
      - "3000:3000"
    networks:
      - backend

  product-catalog-service:
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      auth-server-keycloak:
        condition: service_started
      api-gateway:
        condition: service_healthy
    build:
      context: ./services/product-catalog-service/product-catalog-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - spring.application.name=product-catalog-service
      # - server.port=3000 # This is not needed
      - spring.config.import=configserver:http://config-server:8888
    ports:
      - "3001:3001"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  inventory-service:
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      auth-server-keycloak:
        condition: service_started
      api-gateway:
        condition: service_healthy
    build:
      context: ./services/inventory-service/inventory-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - spring.application.name=inventory-service
      # - server.port=3002 # This is not needed
      - spring.config.import=configserver:http://config-server:8888
    ports:
      - "3002:3002"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  # rabbitmq:
  #   image: rabbitmq:4-management
  #   restart: always
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=camilo
  #     - RABBITMQ_DEFAULT_PASS=camilo123
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   networks:
  #     - backend

networks:
  backend:
    driver: bridge
